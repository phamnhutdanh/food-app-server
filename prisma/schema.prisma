// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SHOP_OWNER
}

enum BillingCardType {
  DEFAULT
  GOLD
}

enum OrderStatus {
  PENDING
  ON_THE_WAY
  DELIVERED
  CANCELED
}

model Account {
  id          String    @id @default(cuid())
  email       String    @unique
  role        UserRole? @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firebaseUID String
  //type              String
  //provider          String
  //providerAccountId String
  //refresh_token     String? @db.Text
  //access_token      String? @db.Text
  //expires_at        Int?
  //token_type        String?
  //scope             String?
  //id_token          String? @db.Text
  //session_state     String?
  User        User[]

  //@@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                 String  @id @default(cuid())
  name               String? @default(cuid())
  //reactCoinsCount    Int               @default(0)
  phoneNumber        String? @unique
  imageUrl           String?
  backgroundImageUrl String?
  defaultAddress     String?

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  cart          Cart[]
  billingCards  BillingCard[]
  orders        Order[]
  Shop          Shop[]
  RatingProduct RatingProduct[]
  RatingShop    RatingShop[]

  @@map("users")
}

model Cart {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  products CartProduct[]

  @@map("carts")
}

model CartProduct {
  id        String  @id @default(cuid())
  title     String? @unique
  fullPrice Float
  count     Int     @default(1)
  imageUri  String?
  // discountPercent    Int     @default(0)
  // weight             Float
  // tag                String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  shopId    String
  shop      Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartProducts")
}

model BillingCard {
  id          String          @id @default(cuid())
  number      Int[]
  cvc         Int
  expiredDate DateTime
  type        BillingCardType @default(DEFAULT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billingCards")
}

model Order {
  id              String      @id @default(cuid())
  deliveryAddress String
  // cutleryCount    Int            @default(0)
  totalCost       Float
  // productsCost    Float
  // deliveryCost         Float
  // serviceFee           Float
  status          OrderStatus @default(PENDING)
  // recipientPhoneNumber String
  // recipientName        String
  commentary      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  deliveredAt     DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  products OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(cuid())
  title     String?
  price     Float
  count     Int
  imageUri  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  shopId    String
  shop      Shop    @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("orderProducts")
}

model Shop {
  id              String  @id @default(cuid())
  shopAddress     String?
  shopPhoneNumber String?

  idUser String
  user   User   @relation(fields: [idUser], references: [id], onDelete: Cascade)

  CartProduct     CartProduct[]
  OrderProduct    OrderProduct[]
  ProductCategory ProductCategory[]
  RatingShop      RatingShop[]

  @@map("shops")
}

model ProductCategory {
  id          String  @id @default(cuid())
  title       String  @unique
  description String
  imageUri    String?

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  subcategories ProductSubcategory[]

  @@map("productCategories")
}

model ProductSubcategory {
  id          String @id @default(cuid())
  title       String @unique
  description String

  categoryId      String
  productCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  products Product[]

  @@map("productSubcategories")
}

model Product {
  id                  String  @id @default(cuid())
  title               String  @unique
  description         String
  fullPrice           Float
  // discountPercent    Int                @default(0)
  imageUri            String?
  averageRatingScores Float

  subcategoryId      String
  productSubcategory ProductSubcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  sizeId      String?
  productSize ProductSize? @relation(fields: [sizeId], references: [id])

  CartProduct   CartProduct[]
  OrderProduct  OrderProduct[]
  ProductTag    ProductTag[]
  RatingProduct RatingProduct[]

  @@map("products")
}

model ProductSize {
  id    String @id @default(cuid())
  title String

  Product Product[]
}

model ProductTag {
  id    String @id @default(cuid())
  title String

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model RatingProduct {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
}

model RatingShop {
  id        String   @id @default(cuid())
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])
  shopId String?
  shop   Shop?   @relation(fields: [shopId], references: [id])
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   expires      DateTime

//   userId       String
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
