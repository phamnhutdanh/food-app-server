// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SHOP_OWNER
}

enum BillingCardType {
  DEFAULT
  GOLD
}

enum OrderStatus {
  PENDING
  ON_THE_WAY
  DELIVERED
  CANCELED
}

enum NotiStatus {
  READ
  UN_READ
}

enum ReportStatus {
  DONE
  READ
  UN_READ
}

model Account {
  id          String    @id @default(cuid())
  email       String    @unique
  role        UserRole? @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  firebaseUID String
  //type              String
  //provider          String
  //providerAccountId String
  //refresh_token     String? @db.Text
  //access_token      String? @db.Text
  //expires_at        Int?
  //token_type        String?
  //scope             String?
  //id_token          String? @db.Text
  //session_state     String?

  reportAccount       ReportAccount[]
  reportAccountDetail ReportAccountDetail[]
  user                User?

  //@@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                 String    @id @default(cuid())
  name               String?   @default(cuid())
  //reactCoinsCount    Int               @default(0)
  phoneNumber        String?   @unique @default("")
  imageUrl           String?
  backgroundImageUrl String?
  defaultAddress     String?   @default("")
  loginAs            UserRole? @default(USER)

  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  cart         Cart[]
  billingCards BillingCard[]

  RatingShop RatingShop[]

  OrderProduct        OrderProduct[]
  NotificationAccount NotificationAccount[]
  RatingProduct       RatingProduct[]
  FavouriteProduct    FavouriteProduct[]
  shop                Shop?

  @@map("users")
}

model Cart {
  id String @id @default(cuid())

  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartProduct CartProduct[]

  @@map("carts")
}

model CartProduct {
  id            String      @id @default(cuid())
  title         String?     @default("")
  amount        Int?        @default(1)
  fullPrice     Float?      @default(0)
  // discountPercent    Int     @default(0)
  // weight             Float
  // tag                String
  productSizeId String
  productSize   ProductSize @relation(fields: [productSizeId], references: [id])
  cartId        String
  cart          Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartProducts")
}

model BillingCard {
  id          String          @id @default(cuid())
  number      Int[]
  cvc         Int
  expiredDate DateTime
  type        BillingCardType @default(DEFAULT)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billingCards")
}

model OrderProduct {
  id String @id @default(cuid())

  fullPrice       Float
  count           Int
  deliveryAddress String
  totalCost       Float
  // productsCost    Float
  // deliveryCost         Float
  // serviceFee           Float
  status          OrderStatus @default(PENDING)
  commentary      String?     @default("")
  deliveredAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  productSizeId String
  productSize   ProductSize @relation(fields: [productSizeId], references: [id])

  @@map("orderProducts")
}

model Shop {
  id              String  @id @default(cuid())
  shopAddress     String? @default("")
  shopPhoneNumber String? @default("")
  shopName        String? @default("")
  imageUri        String? @default("")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  ProductCategory     ProductCategory[]
  RatingShop          RatingShop[]
  NotificationAccount NotificationAccount[]

  @@map("shops")
}

model ProductCategory {
  id          String  @id @default(cuid())
  title       String  @unique
  description String
  imageUri    String?

  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)

  subcategories ProductSubcategory[]

  @@map("productCategories")
}

model ProductSubcategory {
  id          String @id @default(cuid())
  title       String
  description String

  categoryId      String
  productCategory ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  products Product[]

  @@map("productSubcategories")
}

model Product {
  id                  String  @id @default(cuid())
  title               String
  description         String
  fullPrice           Float
  // discountPercent    Int                @default(0)
  imageUri            String?
  averageRatingScores Float?  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subcategoryId      String
  productSubcategory ProductSubcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  ProductTag       ProductTag[]
  ProductSize      ProductSize[]
  RatingProduct    RatingProduct[]
  FavouriteProduct FavouriteProduct[]

  @@map("products")
}

model ProductSize {
  id        String  @id @default(cuid())
  title     String
  fullPrice Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  CartProduct  CartProduct[]
  OrderProduct OrderProduct[]
}

model ProductTag {
  id    String @id @default(cuid())
  title String

  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model RatingProduct {
  score     Int
  comment   String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@unique([userId, productId])
}

model RatingShop {
  id        String   @id @default(cuid())
  score     Int
  comment   String?  @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
  shopId String
  shop   Shop   @relation(fields: [shopId], references: [id])
}

model ReportAccount {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mark ReportStatus? @default(UN_READ)

  accountReportedId String
  accountReported   Account @relation(fields: [accountReportedId], references: [id])

  reportAccountDetail ReportAccountDetail?
}

model ReportAccountDetail {
  id        String   @id @default(cuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reporterId      String
  reporter        Account       @relation(fields: [reporterId], references: [id])
  reportAccountId String        @unique
  reportAccount   ReportAccount @relation(fields: [reportAccountId], references: [id])
}

model FavouriteProduct {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, productId])
  @@unique([userId, productId])
}

model NotificationAccount {
  id        String   @id @default(cuid())
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status   NotiStatus? @default(UN_READ)
  toUserId String?
  user     User?       @relation(fields: [toUserId], references: [id], onDelete: Cascade)
  toShopId String?
  shop     Shop?       @relation(fields: [toShopId], references: [id], onDelete: Cascade)
}

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   expires      DateTime

//   userId       String
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
